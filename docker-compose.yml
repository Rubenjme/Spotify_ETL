#-----------------------------------------------------------------------------------------------------
# Este archivo contiene la configuración de los servicios de Docker Compose para Airflow y PostgreSQL. 
#-----------------------------------------------------------------------------------------------------
version: '3.9'    # Versión de Docker Compose

services:

# Servicio para PostgreSQL, que actúa como la base de datos para Airflow
  postgres_db: 
    image: postgres:13
    container_name: postgres_db                   # Nombre del contenedor
    environment:                                  # Variables de entorno necesarias para PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER}             # Usuario de la base de datos
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}     # Contraseña del usuario de la base de datos
      POSTGRES_DB: ${POSTGRES_DB}                 # Nombre de la base de datos
    ports:
      - "5432:5432"                               # Expone el puerto 5432 para que esté accesible localmente
    healthcheck:                                  # Comprueba si PostgreSQL está listo antes de que otros servicios dependan de él
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - postgres-data:/var/lib/postgresql/data    # Almacena los datos de PostgreSQL en un volumen persistente


# Servicio para el servidor web de Airflow
  airflow-webserver:
    container_name: airflow_webserver
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    environment:                                                          # Variables de entorno necesarias para Airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor                              # Define el ejecutor como LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_SQL_ALCHEMY_CONN}    # URL de conexión a PostgreSQL
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_WWW_USER_USERNAME: airflow                                 # Nombre del usuario administrador
      _AIRFLOW_WWW_USER_PASSWORD: airflow                                 # Contraseña del usuario administrador
      AIRFLOW__WEBSERVER__SECRET_KEY: 'SecretKeyfortheServer'             # Clave secreta para el servidor web
      
      # VARIABLES DE SPOTIFY
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REFRESH_TOKEN: ${SPOTIFY_REFRESH_TOKEN}

      # VARIABLES DE POSTGRES
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    command: "airflow webserver"                                          # Comando para el webserver
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags      # Monta la carpeta local `dags` como la carpeta de DAGs en Airflow
      - ./logs:/opt/airflow/logs      # Monta la carpeta local `logs` como la carpeta de logs en Airflow
    depends_on:                       # Indica que este servicio depende de PostgreSQL
      postgres_db:
        condition: service_healthy    # Espera a que PostgreSQL esté listo antes de iniciar



# Servicio para inicializar Airflow (crear la base de datos y el usuario administrador)
  airflow-init:
    image: apache/airflow:2.5.1
    container_name: airflow_init
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_SQL_ALCHEMY_CONN}
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow

      # VARIABLES DE POSTGRES
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    entrypoint: /bin/bash -c "airflow db upgrade && airflow users create --username airflow --password airflow --firstname Admin --lastname Admin --role Admin --email admin@example.com"
    volumes:
      - ./dags:/opt/airflow/dags
    depends_on:
      postgres_db:
        condition: service_healthy


  airflow-scheduler:
    image: apache/airflow:2.5.1
    container_name: airflow_scheduler
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'SecretKeyfortheServer'

      # VARIABLES DE SPOTIFY
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REFRESH_TOKEN: ${SPOTIFY_REFRESH_TOKEN}

      # VARIABLES DE POSTGRES
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    command: "airflow scheduler"
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs


# Configuración de volúmenes persistentes para almacenar los datos de PostgreSQL
volumes:
  postgres-data:      # Volumen persistente para los datos de PostgreSQL
